crystal_doc_search_index_callback({"repository_name":"DanielcoderX/dtd","body":"# dtd\n\nThis module provides a convenient way to calculate the difference between two dates in days, months, and years. It also offers the ability to calculate the difference between two times in hours, minutes, and seconds. It offers a simple and effective solution for performing date and time calculations in Crystal applications.\n\n## Installation\n\n1. Add the `dtd` dependency to your `shard.yml` file:\n\n   ```yaml\n   dependencies:\n     dtd:\n       github: danielcoderx/dtd\n   ```\n\n2. Run `shards install` to fetch the dependency.\n\n## Usage\n\n### Date Difference\n\n```crystal\nrequire \"dtd\"\n\ndate1 = \"2022/04/30\"\ndate2 = \"2022/05/01\"\n\nresult = Dtd.date_diff(date1, date2)\n\nputs \"Difference: #{result[\"years\"]} years, #{result[\"months\"]} months, #{result[\"days\"]} days\"\n```\n\n### Time Difference\n\n```crystal\nrequire \"dtd\"\n\ntime1 = \"2022/05/01 10:30:00\"\ntime2 = \"2022/05/01 12:45:30\"\n\nresult = Dtd.time_diff(time1, time2)\n\nputs \"Difference: #{result[\"hours\"]} hours, #{result[\"minutes\"]} minutes, #{result[\"seconds\"]} seconds\"\n```\n\n## Features\n\n- Calculates the difference between two dates in days, months, and years.\n- Calculates the difference between two times in hours, minutes, and seconds.\n- Supports custom time zones for accurate calculations.\n- Returns a Hash that provides the difference in years, months, days, hours, minutes, and seconds.\n- Handles scenarios where the second date or time is before the first date or time.\n- Provides error messages when necessary.\n\n## TODO\n\n- Enhance error handling and error messages.\n- Add support for accepting various input formats.\n- Improve overall performance and efficiency.\n\n## Contributing\n\n1. Fork the repository from [https://github.com/danielcoderx/dtd](https://github.com/danielcoderx/dtd).\n2. Create your feature branch: `git checkout -b my-new-feature`.\n3. Commit your changes: `git commit -am 'Add some feature'`.\n4. Push the branch to your forked repository: `git push origin my-new-feature`.\n5. Create a new Pull Request.\n\n## Contributors\n\n- [danielcoderx](https://github.com/danielcoderx) - Creator and maintainer\n\nYour contributions to this project are highly appreciated! If you have any suggestions, bug reports, or feature requests, please don't hesitate to open an issue or submit a pull request. Let's work together to make `dtd` even better!","program":{"html_id":"DanielcoderX/dtd/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"DanielcoderX/dtd","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"DanielcoderX/dtd/Dtd","path":"Dtd.html","kind":"module","full_name":"Dtd","name":"Dtd","abstract":false,"locations":[{"filename":"src/dtd.cr","line_number":2,"url":"/blob/refs/heads/main/%FILE%"}],"repository_name":"DanielcoderX/dtd","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":"The current version of the Dtd module.","summary":"<p>The current version of the Dtd module.</p>"}],"doc":"Module Dtd provides methods for calculating the difference between two dates.","summary":"<p>Module Dtd provides methods for calculating the difference between two dates.</p>","class_methods":[{"html_id":"date_diff(date1:String,date2:String,time_zone:String=\"UTC\"):Hash(String,Int32)|Hash(String,String)-class-method","name":"date_diff","doc":"Calculates the difference between two dates in days, months, and years.\n\ndate1     - The first date in the format YYYY/MM/DD (String).\ndate2     - The second date in the format YYYY/MM/DD (String).\ntime_zone - The time zone in which the dates are specified (String, default: \"UTC\").\n\nExamples:\n  Dtd.date_diff(\"2022/04/30\", \"2022/05/01\")\n  => {\"years\" => 0, \"months\" => 0, \"days\" => 1}\n\nReturns a Hash containing the difference in years, months, and days, or an error Hash.\nIf the difference is positive, the Hash contains the keys \"years\", \"months\", and \"days\"\nwith their respective integer values.\nIf date2 is before date1, the Hash contains the key \"error\" with the value \"Date 2 is before date 1.\"\nIf the difference is 0, the Hash contains the keys \"years\", \"months\", and \"days\" with the value 0 for each.","summary":"<p>Calculates the difference between two dates in days, months, and years.</p>","abstract":false,"args":[{"name":"date1","external_name":"date1","restriction":"String"},{"name":"date2","external_name":"date2","restriction":"String"},{"name":"time_zone","default_value":"\"UTC\"","external_name":"time_zone","restriction":"String"}],"args_string":"(date1 : String, date2 : String, time_zone : String = \"UTC\") : Hash(String, Int32) | Hash(String, String)","args_html":"(date1 : String, date2 : String, time_zone : String = <span class=\"s\">&quot;UTC&quot;</span>) : Hash(String, Int32) | Hash(String, String)","location":{"filename":"src/dtd.cr","line_number":21,"url":"/blob/refs/heads/main/%FILE%"},"def":{"name":"date_diff","args":[{"name":"date1","external_name":"date1","restriction":"String"},{"name":"date2","external_name":"date2","restriction":"String"},{"name":"time_zone","default_value":"\"UTC\"","external_name":"time_zone","restriction":"String"}],"return_type":"Hash(String, Int32) | Hash(String, String)","visibility":"Public","body":"time_zone = Time::Location.load(time_zone)\ndate1_time = Time.parse(date1, \"%Y/%m/%d\", time_zone)\ndate2_time = Time.parse(date2, \"%Y/%m/%d\", time_zone)\ndays_diff = (date2_time - date1_time) / 86400.seconds\nif days_diff.zero?\n  {\"years\" => 0, \"months\" => 0, \"days\" => 0}\nelse\n  if days_diff < 0\n    {\"error\" => \"Date 2 is before date 1.\"}\n  else\n    years = (days_diff / 365.25).to_i\n    days_diff = days_diff % 365.25\n    months = (days_diff / 30.44).to_i\n    days = (days_diff % 30.44).to_i\n    {\"years\" => years, \"months\" => months, \"days\" => days}\n  end\nend\n"}},{"html_id":"time_diff(time1:String,time2:String,time_zone:String=\"UTC\"):Hash(String,Int32|Int64)|Hash(String,Int32)|Hash(String,String)-class-method","name":"time_diff","doc":"Calculates the difference between two times in hours, minutes, and seconds.\n\ntime1     - The first time in the format YYYY/MM/DD HH:MM:SS (String).\ntime2     - The second time in the format YYYY/MM/DD HH:MM:SS (String).\ntime_zone - The time zone in which the times are specified (String, default: \"UTC\").\n\nExamples:\n  Dtd.time_diff(\"2022/01/01 08:45:00\", \"2022/01/01 11:30:15\")\n  => {\"hours\" => 2, \"minutes\" => 45, \"seconds\" => 15}\n\nReturns a Hash containing the difference in hours, minutes, and seconds, or an error Hash.\nIf the difference is positive, the Hash contains the keys \"hours\", \"minutes\", and \"seconds\"\nwith their respective integer values.\nIf time2 is before time1, the Hash contains the key \"error\" with the value \"Time 2 is before time 1.\"\nIf the difference is 0, the Hash contains the keys \"hours\", \"minutes\", and \"seconds\" with the value 0 for each.","summary":"<p>Calculates the difference between two times in hours, minutes, and seconds.</p>","abstract":false,"args":[{"name":"time1","external_name":"time1","restriction":"String"},{"name":"time2","external_name":"time2","restriction":"String"},{"name":"time_zone","default_value":"\"UTC\"","external_name":"time_zone","restriction":"String"}],"args_string":"(time1 : String, time2 : String, time_zone : String = \"UTC\") : Hash(String, Int32 | Int64) | Hash(String, Int32) | Hash(String, String)","args_html":"(time1 : String, time2 : String, time_zone : String = <span class=\"s\">&quot;UTC&quot;</span>) : Hash(String, Int32 | Int64) | Hash(String, Int32) | Hash(String, String)","location":{"filename":"src/dtd.cr","line_number":65,"url":"/blob/refs/heads/main/%FILE%"},"def":{"name":"time_diff","args":[{"name":"time1","external_name":"time1","restriction":"String"},{"name":"time2","external_name":"time2","restriction":"String"},{"name":"time_zone","default_value":"\"UTC\"","external_name":"time_zone","restriction":"String"}],"return_type":"Hash(String, Int32 | Int64) | Hash(String, Int32) | Hash(String, String)","visibility":"Public","body":"time_zone = Time::Location.load(time_zone)\ntime1_time = Time.parse(time1, \"%Y/%m/%d %H:%M:%S\", time_zone)\ntime2_time = Time.parse(time2, \"%Y/%m/%d %H:%M:%S\", time_zone)\nseconds_diff = (time2_time - time1_time).to_i\nif seconds_diff.zero?\n  {\"hours\" => 0, \"minutes\" => 0, \"seconds\" => 0}\nelse\n  if seconds_diff < 0\n    {\"error\" => \"Time 2 is before time 1.\"}\n  else\n    hours = (seconds_diff / 3600).to_i\n    seconds_diff = seconds_diff % 3600\n    minutes = (seconds_diff / 60).to_i\n    seconds = seconds_diff % 60\n    {\"hours\" => hours, \"minutes\" => minutes, \"seconds\" => seconds}\n  end\nend\n"}}]}]}})